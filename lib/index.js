var H=function(M,v=!1){if(W)if(v)console.warn(M);else console.log(M)};async function V(M){const b=await(await fetch(M).catch(()=>Promise.reject(new Error("Error fetching data")))).json().catch(()=>{return H("Error parsing server response"),Promise.reject(new Error("Error parsing server response"))});if(b.status==="OK")return H(b),b;return H(`${b.error_message}.\nServer returned status code ${b.status}`,!0),Promise.reject(new Error(`${b.error_message}.\nServer returned status code ${b.status}`))}var W=!1,k=null,q="en",h=null,J=null,S="https://maps.googleapis.com/maps/api/geocode/json",Z={setApiKey(M){k=M},setLanguage(M){q=M},setRegion(M){h=M},enableDebug(M=!0){W=M},setLocationType(M){J=M},async fromLatLng(M,v,b,z,x,Q){if(!M||!v)return H("Provided coordinates are invalid",!0),Promise.reject(new Error("Provided coordinates are invalid"));const X=`${M},${v}`;let F=`${S}?latlng=${encodeURIComponent(X)}`;if(b||k)k=b||k,F+=`&key=${k}`;if(z||q)q=z||q,F+=`&language=${q}`;if(x||h)h=x||h,F+=`&region=${encodeURIComponent(h)}`;if(Q||J)J=Q||h,F+=`&location_type=${encodeURIComponent(J)}`;return V(F)},async fromAddress(M,v,b,z){if(!M)return H("Provided address is invalid",!0),Promise.reject(new Error("Provided address is invalid"));let x=`${S}?address=${encodeURIComponent(M)}`;if(v||k)k=v||k,x+=`&key=${k}`;if(b||q)q=b||q,x+=`&language=${q}`;if(z||h)h=z||h,x+=`&region=${encodeURIComponent(h)}`;return V(x)}};export{Z as default};
